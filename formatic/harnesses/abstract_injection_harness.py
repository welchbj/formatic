"""Implementation of the AbstractInjectionHarness class."""

from abc import (
    ABC,
    abstractmethod)


class AbstractInjectionHarness(ABC):
    """Abstract harness for configuring injection-delivery methods."""

    def __init__(
        self,
        injection_marker: str
    ) -> None:
        super().__init__()
        self._injection_marker = injection_marker

    @abstractmethod
    def send_injection(
        self,
        payload: str
    ) -> str:
        """The method used to send injections to a vulnerable service.

        Implementations of this method should refrain from modifying the
        :arg:`payload` argument, as this is a specific payload generated by
        the library.

        As an example, see :class:`SubprocessInjectionHarness`.

        """

    @property
    def injection_marker(
        self
    ) -> str:
        """The marker of where to subsitute the generated format() payloads."""
        return self._injection_marker
